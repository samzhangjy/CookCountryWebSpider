"""
Storage util for the spider
"""
import os
from pprint import pprint as print

import pymysql
from openpyxl import Workbook
from tqdm import tqdm


def storeToDatabase(results):
    """Store the given result to the database
    :param results: the result to store, usually generated by `getCaseDetails`
    :return: int, 0 for success, 1 for failed
    """
    try:
        # Open database connection
        db = pymysql.connect('localhost', 'root', 'sam951951', 'CookCountry')
        for result in results:
            # Prepare a cursor object using cursor() method
            cursor = db.cursor()
            # --- Format results ---
            # Case id
            case_id = result['case_num']
            # Plaintiffs
            plaintiffs = ','.join(result['plaintiff'])
            # Defendants
            defendants = ','.join(result['defendant'])
            # Filing date
            filing_date = '%d-%d-%d 00:00:00' % (
                result['filing_date'].year, result['filing_date'].month, result['filing_date'].day)
            case_activity = ''
            for activity in result['case_activity']:
                case_activity += 'Title: %s  ' % activity['title']
                case_activity += 'Detail: %s' % activity['detail']
            # --- End format results ---

            # --- SQL ---
            cursor.execute(
                "SELECT case_id, COUNT(*) FROM `Case` WHERE case_id = %s GROUP BY case_id",
                (case_id,)
            )
            row_count = cursor.rowcount
            if row_count == 0:
                sql = """INSERT INTO `Case` (case_id, defendants, plaintiffs, filing_date, case_activity)
                VALUES ('%s', '%s', '%s', '%s', "%s");""" % (case_id, plaintiffs, defendants, filing_date, case_activity)
                # Execute the SQL
                cursor.execute(sql)
                # IMPORTANT: DON'T FORGET THIS LINE
                db.commit()
            # --- End SQL ---

            # Close cursor
            cursor.close()
        # Return 0 when success
        return 0
    except:
        # Otherwise, return 1 for error
        cursor.close()
        return 1


def storeToExcel(results, filename='result.xlsx'):
    """Store the given result to an Excel file (.xlsx)
    :param results: the result to store, can be generated by `getCaseDetails`
    :param filename: the filename with the extension name, defines where to store the Excel
    file. Defaults to `result.xlsx`
    :return: int, 0 for success, and 1 for failure
    """
    try:
        # If the excel file exists, delete it
        if os.path.exists('./%s' % filename):
            os.remove('./%s' % filename)
        # Create a new workbook
        wb = Workbook()
        # Select the current active sheet
        sheet = wb.active
        # Rename the sheet
        sheet.title = 'Result'
        # Insert the titles
        sheet['A1'] = 'ID'
        sheet['B1'] = 'Plaintiff'
        sheet['C1'] = 'Defandant(s)'
        sheet['D1'] = 'Filing Date'
        # Fill in the blanks
        i = 2
        for _ in results:
            # id
            id = _['case_num']
            # print(id)
            sheet['A%d' % i] = id
            # Plaintiff
            plaintiff = ', '.join(_['plaintiff'])
            # print(plaintiff)
            sheet['B%d' % i] = plaintiff
            # Defendants
            defendants = ', '.join(_['defendant'])
            # print(defendants)
            sheet['C%d' % i] = defendants
            # Filing date
            filing_date = _['filing_date']
            # print(filing_date)
            sheet['D%d' % i] = filing_date.strftime("%Y-%m-%d")
            i += 1

        wb.save('./result.xlsx')
        # Return success
        return 0
    except:
        # Return failed :-(
        return 1
